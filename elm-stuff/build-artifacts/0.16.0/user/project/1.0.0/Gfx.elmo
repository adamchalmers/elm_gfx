Elm.Gfx = Elm.Gfx || {};
Elm.Gfx.make = function (_elm) {
   "use strict";
   _elm.Gfx = _elm.Gfx || {};
   if (_elm.Gfx.values) return _elm.Gfx.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var log = function (x) {    return A2($Debug.log,"",x);};
   var fourfold = F3(function (shape,size,angle) {
      return A2($Graphics$Collage.rotate,
      $Basics.degrees(angle),
      $Graphics$Collage.group(_U.list([A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: 0,_1: size},shape)
                                      ,A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: 0,_1: 0 - size},shape)
                                      ,A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: size,_1: 0},shape)
                                      ,A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: 0 - size,_1: 0},shape)])));
   });
   var choices = $Array.fromList(_U.list([$Color.red,$Color.green,$Color.green,$Color.blue,$Color.purple,$Color.orange]));
   var rndColor = function (seed) {
      var n = $Array.length(choices) - 1;
      var _p0 = A2($Random.generate,A2($Random.$int,0,n),log(seed));
      var index = _p0._0;
      var newSeed = _p0._1;
      var color = log(A2($Array.get,index,choices));
      var _p1 = color;
      if (_p1.ctor === "Nothing") {
            return A2($Debug.log,A2($Basics._op["++"],"Bad index ",$Basics.toString(n)),{ctor: "_Tuple2",_0: $Color.black,_1: newSeed});
         } else {
            return {ctor: "_Tuple2",_0: _p1._0,_1: newSeed};
         }
   };
   var rndShape = F2(function (seed,dist) {
      var rInt = $Random.$int;
      var _p2 = A2($Random.generate,A2(rInt,101,201),seed);
      var s0 = _p2._1;
      var _p3 = rndColor(s0);
      var color = _p3._0;
      var s1 = _p3._1;
      var _p4 = A2($Random.generate,A2(rInt,3,8),s1);
      var sides = _p4._0;
      var s2 = _p4._1;
      var _p5 = A2($Random.generate,A2(rInt,10,80),s2);
      var sized = _p5._0;
      var s3 = _p5._1;
      var rndShape = A2($Graphics$Collage.ngon,sides,$Basics.toFloat(sized));
      var _p6 = A2($Random.generate,A2(rInt,dist - 50,dist + 50),s3);
      var width = _p6._0;
      var s4 = _p6._1;
      var _p7 = A2($Random.generate,A2(rInt,0,90),s4);
      var angle = _p7._0;
      var s5 = _p7._1;
      return {ctor: "_Tuple2",_0: A3(fourfold,A2($Graphics$Collage.filled,color,rndShape),$Basics.toFloat(width),$Basics.toFloat(angle)),_1: s5};
   });
   var rings = function (seed) {
      var _p8 = A2($Random.generate,A2($Random.$int,101,201),seed);
      var s0 = _p8._1;
      var _p9 = A2(rndShape,s0,250);
      var ring1 = _p9._0;
      var s1 = _p9._1;
      var _p10 = A2(rndShape,s1,150);
      var ring2 = _p10._0;
      var s2 = _p10._1;
      return {ctor: "_Tuple2",_0: $Graphics$Collage.group(_U.list([ring1,ring2])),_1: s2};
   };
   var width = 600;
   var canvas = A2($Graphics$Collage.collage,width,width);
   return _elm.Gfx.values = {_op: _op
                            ,canvas: canvas
                            ,width: width
                            ,rings: rings
                            ,rndShape: rndShape
                            ,choices: choices
                            ,rndColor: rndColor
                            ,fourfold: fourfold
                            ,log: log};
};